liens :
- https://developer.mozilla.org/fr/docs/Web/HTTP
- http://abcdrfc.free.fr/rfc-vf/pdf/rfc2616.pdf     ->rfc (francais)
- https://www.ietf.org/rfc/rfc2068.txt              ->rfc (anglais)
- https://betterprogramming.pub/writing-your-own-http-server-introduction-b2f94581268b
- https://www.youtube.com/watch?v=gr7oaiUsxSU
- https://man7.org/linux/man-pages/man2/socket.2.html
- https://www.youtube.com/watch?v=9J1nJOivdyw
- https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html
- https://medium.com/from-the-scratch/http-server-what-do-you-need-to-know-to-build-a-simple-http-server-from-scratch-d1ef8945e4fa
- https://www.ibm.com/docs/en/i/7.4?topic=designs-using-poll-instead-select -> usage poll

---------------------------  HTTP  ----------------------------------------
HTTP est un protocole qui permet de récupérer des ressources telles que des documents HTML. Il est à la base de tout échange de données sur le Web.
un document => reconstruit a partir de plusieurs sous doc
HTTP de type client-serveur,  donc echange individuel et non flux de donnees.
Donnees transite via TCP.

Les requetes sont envoyees par des agents utilisateur (le plus souvent navigateur web). cette requete est envoyee au serveur, qui la traite et donne une reponse.
Entre requete et reponse, les proxy agissent et executent differentes operations.

Ordre des choses:
navigateur envoie toujours la requete en premier
le serveur recoit la demande et la traite pour servir le document. attention ce n'est pas forcement qu'un seul ordinateur, peut etre plusieurs machine ou plusieurs serveur surune meme machine.
recupere le fichier demander, l'analyse et en fonction de son analyse, recupere les dependance necessaires
le navigateur assemble tous les document pour former la page web


HTTP est sans état : il n'y a pas de lien entre deux requêtes qui sont effectuées successivement sur la même connexion. Cela devient très rapidement problématique lorsque les utilisateurs veulent interagir avec une page de façon cohérente, par exemple avec un panier d'achat sur un site de commerce en ligne. Bien que le cœur d'HTTP soit sans état, les cookies HTTP permettent l'utilisation de sessions avec des états. 

HTTP et TCP
HTTP/1.0 ouvre une connexion TCP pour chaque échange requête/réponse, ce qui introduit deux défauts majeur : l'ouverture d'une connexion nécessite plusieurs allers-retours, ce qui est lent mais devient plus efficace lorsque plusieurs messages sont envoyés et envoyés régulièrement. 
Afin de réduire ces défauts, HTTP/1.1 introduit le pipelining (qui s'est avéré difficile à mettre en œuvre) et les connexions persistantes : la connexion TCP sous-jacente peut être partiellement contrôlée en utilisant l'en-tête Connection. 




---------------------------  en vrac  ----------------------------------------
int socket(int domain, int type, int protocol);
In general, a server is an infinite loop where the accept method is called again and again to accept any new connections which arrive. We want to be able to process the request of one connection as quickly as possible so that we can then call accept again and handle the new connection.

